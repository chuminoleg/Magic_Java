package Lessons.Lessons10_11.Materials;

/* this и super - основное их назначение - вызывать один конструктор из другого и ссылаться на переменные экземпляра
класса, объявленные в текущем классе и его родительском классе.
Главное отличие между this и super в Java в том, что this представляет текущий экземпляр класса,
в то время как super - текущий экземпляр родительского класса.
1 this используется в контексте класса, над которым вы работаете, а super используется для ссылки на
текущий экземпляр родительского класса.
2 Каждый конструктор по умолчанию вызывает super(), который является вызовом конструктора без аргументов
родительского класса, но вы все равно можете вызвать другой конструктор явно, используя this() или super() .
3 переменной this нельзя присвоить новое значение, потому что она объявлена как final
4 this и super могут использоваться в цепочке конструкторов для вызова другого конструктора, например, this() и super()
соответственно не вызывают конструктора аргументов дочернего и родительского классов.
5 вы также можете использовать их внутри внутренних классов, они очень удобны для получения ссылки на внешний класс
в Java, Outer.this и Outer.super могут использоваться для получить текущий экземпляр класса Outer и его родителя в Java
6 Если используется как метод, то this() используется для вызова конструктора без аргументов текущего класса, а super()
используется для вызова конструктора по умолчанию родительского класса.
7 Поскольку конструктор в Java может быть перегружен, обе функции this() и super() также могут быть перегружены для
вызова соответствующих конструкторов
*/

// Тест-класс и вывод

public class TestThisAndSuper {
    public static void main(String[] args) {
//        Animals animals = new Animals(); 1
//        Animals animals = new Animals(); // 1
//        Animals animals = new Animals("Animal"); 2
//        Animals animals = new Animals("Animal");//2
//        System.out.println(animals); //3
        Dog dog = new Dog(); //4
        Dog dog2 = new Dog("Bobik");
    }
}

// родительский класс
class Animals{
    String name;

    public Animals() {
        System.out.println("Вызов конструктора без аргументов класса Animals");
    }

    public Animals(String name) {
        this.name = name;
        System.out.println("Вызов конструктора с 1 параметром класса Animals");
    }

}

// наследующий класс
class Dog extends Animals{
//    public Dog() { //5
////        this("Bobik"); //Вызов конструктора с 1 параметром класса Dog
//        System.out.println("Вызов конструктора без параметров класса Dog");
//    }
//
//    public void Animals(){
//
//    }
//    public Dog(String name) { //6
////        super("Bobik"); //Вызов конструктора с 1 параметром класса Animals
//        System.out.println("Вызов конструктора с 1 параметром класса Dog");
//    }
//


    public Dog() {
    }

    public Dog(String name) {
        super(name);
    }

}


